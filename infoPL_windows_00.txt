Windows - szybki przewodnik budowania (x64) + warianty zoptymalizowane

1) Wymagania
- Visual Studio 2022 (Desktop development with C++)
- CMake 3.15+ (cmake w PATH)
- Git (dla submodule)

2) Jednorazowa konfiguracja (clone + submodules)
- Jeśli już jesteś na gałęzi w tym repozytorium, pomiń klonowanie.
  git clone https://github.com/dancmari/HDMapping.git
  cd HDMapping
  git submodule init
  git submodule update --recursive

3) Build x64 Release - podstawowy wariant (AUTO)
  mkdir build
  cd build
  cmake -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022" -A x64 ..
  cmake --build . --config Release --parallel
- Pliki wykonywalne znajdują się w build\bin\Release\

4) Warianty zoptymalizowane (AMD / INTEL / GENERIC / AUTO)
A. Z użyciem istniejącego skryptu (zalecane dla lidar_odometry_step_1):
  # z katalogu głównego repozytorium
  ./build_all_vs17.ps1
Instrukcje uruchomienia (PowerShell):
  1) Otwórz Windows PowerShell.
  2) Przejdź do katalogu głównego repozytorium (katalog zawierający build_all_vs17.ps1):
    cd C:\sciezka\do\HDMapping
  3) Uruchom skrypt (jeśli polityka wykonywania blokuje skrypty, tymczasowo zezwól w tej sesji):
    Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
    .\build_all_vs17.ps1

- Skrypt tworzy: build_release_generic, build_release_amd, build_release_intel,
  buduje cel lidar_odometry_step_1 i kopiuje binaria do folderu binaries\
  jako: lidar_odometry_step_1_release_{generic|amd|intel}_v085_vs17.exe

B. Ręcznie per profil (przykład dla AMD; powtórz dla INTEL i GENERIC):
  # AMD
  cmake -S . -B build_release_amd -G "Visual Studio 17 2022" -A x64 -DHD_CPU_OPTIMIZATION=AMD -DCMAKE_BUILD_TYPE=Release
  cmake --build build_release_amd --config Release --target lidar_odometry_step_1 --parallel
  # (Opcjonalnie) kopiowanie do wspólnego folderu
  if not exist binaries mkdir binaries
  copy build_release_amd\bin\Release\lidar_odometry_step_1.exe binaries\lidar_odometry_step_1_release_amd_vs17.exe

  # INTEL
  cmake -S . -B build_release_intel -G "Visual Studio 17 2022" -A x64 -DHD_CPU_OPTIMIZATION=INTEL -DCMAKE_BUILD_TYPE=Release
  cmake --build build_release_intel --config Release --target lidar_odometry_step_1 --parallel
  copy build_release_intel\bin\Release\lidar_odometry_step_1.exe binaries\lidar_odometry_step_1_release_intel_vs17.exe

  # GENERIC (przenośny)
  cmake -S . -B build_release_generic -G "Visual Studio 17 2022" -A x64 -DHD_CPU_OPTIMIZATION=GENERIC -DCMAKE_BUILD_TYPE=Release
  cmake --build build_release_generic --config Release --target lidar_odometry_step_1 --parallel
  copy build_release_generic\bin\Release\lidar_odometry_step_1.exe binaries\lidar_odometry_step_1_release_generic_vs17.exe

Uwagi dotyczące profili:
- AUTO (domyślny): automatycznie wybiera na podstawie CPU (na MSVC stosuje umiarkowane optymalizacje; na AMD /Oi /Ot /Oy).
- AMD / INTEL: wymusza żądany profil.
- GENERIC: najbardziej przenośny wariant.

5) Budowanie innych aplikacji (nie tylko lidar_odometry_step_1)
Aplikacje dodane w CMake na tej gałęzi obejmują (przykłady):
- hd_mapper, lidar_odometry_step_1, manual_color, matrix_mul,
  multi_session_registration, multi_view_tls_registration, split_multi_livox,
  precision_forestry_tools, mandeye_raw_data_viewer, compare_trajectories,
  quick_start_demo, mandeye_mission_recorder_calibration,
  mandeye_single_session_viewer, livox_mid_360_intrinsic_calibration,
  single_session_manual_coloring

Przykłady:
  # hd_mapper (AMD)
  cmake -S . -B build_release_amd -G "Visual Studio 17 2022" -A x64 -DHD_CPU_OPTIMIZATION=AMD -DCMAKE_BUILD_TYPE=Release
  cmake --build build_release_amd --config Release --target hd_mapper --parallel
  copy build_release_amd\bin\Release\hd_mapper.exe binaries\hd_mapper_release_amd_vs17.exe

  # multi_session_registration (GENERIC)
  cmake -S . -B build_release_generic -G "Visual Studio 17 2022" -A x64 -DHD_CPU_OPTIMIZATION=GENERIC -DCMAKE_BUILD_TYPE=Release
  cmake --build build_release_generic --config Release --target multi_session_registration --parallel
  copy build_release_generic\bin\Release\multi_session_registration.exe binaries\multi_session_registration_release_generic_vs17.exe

Wskazówka: używaj tego samego katalogu build dla profilu (np. build_release_amd) i zmieniaj tylko cel poleceniem --target <nazwa_aplikacji>.

6) Inne architektury
- Obecna konfiguracja celuje w x64 (-A x64). Dla Win32 (x86) lub ARM64 można spróbować:
  -A Win32   (x86)   - mogą pojawić się niezgodności w 3rdparty; nieprzetestowane na tej gałęzi
  -A ARM64   (ARM64) - prawdopodobnie wymaga dodatkowych zależności/portowania; nieprzetestowane
- Rekomendacja: na Windows używaj x64. Jeśli próbujesz inną architekturę, zacznij od profilu GENERIC.

7) Czyszczenie / rebuild
  rmdir /S /Q build
  rmdir /S /Q build_release_amd
  rmdir /S /Q build_release_intel
  rmdir /S /Q build_release_generic
  mkdir build & cd build & cmake -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022" -A x64 .. & cmake --build . --config Release --parallel

8) Typowe problemy
- "make" nie jest rozpoznawane: na Windows używaj generatora Visual Studio + cmake --build, nie make.
- CMake nie znajduje MSVC: zainstaluj "Desktop development with C++" w Visual Studio Installer.
- Błędy submodule: uruchom ponownie git submodule init && git submodule update --recursive.

9) Wybór profilu - skrót
- CPU AMD: AMD lub AUTO
- CPU Intel: INTEL lub AUTO
- Dystrybuowalne/przenośne: GENERIC

Koniec.
